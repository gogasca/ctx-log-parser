package com.ctx.log.parser.model;

import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class SipMessage {

	
	//2012-05-04 08:12:50,949 INFO  {sjc01-ops-ctx-eng-1|MeetmeApplication|MeetMe-doRequest}-[SipFSM:sendReferenceMessage|158] - TX: BYE sip:8001@10.22.133.238:5060;transport=tcp SIP/2.0
	//[2011/01/13 08:55:56.109] IN 172.24.65.206:4040 --> 142.120.93.129:11156
	private int    processingErrors = 0;
	private String callID = "";
	private String headerLine = "";
	private String digits = "(\\d+)";
	private String messageDirectionRegex = "(RX:|TX:)";
	private String messageDirection = "";
	private String timeStampRegex = "^" + digits + "-" + digits + "-" + digits + "\\s" + digits + ":" + digits + ":" + digits + "," + digits;
	private String fromTagRegex = "From:.*<.*>;tag=(.*)";
	private String toTagRegex = "To:.*<.*>;tag=(.*)";
	private String methodRegex = ".*(RX:|TX:)\\s+(.*)";
	private String validIpAddressRegex = ".*\\@((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):";
	private String validIPAddressRegexContact = ".*:((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))(:|;)";
	private String validInviteRegexIn = ".*(RX:)\\s+INVITE\\s+sip:(.*)@((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):";
	private String validInviteRegexOut = ".*(TX:)\\s+INVITE\\s+sip:(.*)@((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])):";
	private String toTag = "";
	private String fromTag = "";
	private String timeStamp = "";
	private String sipMethod = "";
	private ArrayList<String> sipContent = new ArrayList<String>();
	
	/**
	 * Constructor
	 */
	
	public SipMessage() {
		
	}
	
	public boolean isValidSipInviteIn(){
		
		Matcher m0 = Pattern.compile(validInviteRegexIn).matcher(headerLine);
		
		try {
			if(m0.find()) {
				return true;
			}
			else {
				return false;
			}
			
		}
		catch(Exception e) {
			processingErrors++;
			
		}	
		
		return false;
				
	}
	
	public boolean isValidSipInviteOut(){
		
		Matcher m0 = Pattern.compile(validInviteRegexOut).matcher(headerLine);
		
		try {
			if(m0.find()) {
				return true;
			}
			else {
				return false;
			}
			
		}
		catch(Exception e) {
			processingErrors++;
			
		}	
		
		return false;
				
	}

	/**
	 * 
	 * @param sipLine
	 * @return
	 */

	public String parseIpMethod(String sipLine){
		
		Matcher m0 = Pattern.compile(validIpAddressRegex).matcher(sipLine);
		String resultIP= "";
		
		try {
			if (m0.lookingAt()) {		
				resultIP = m0.group(1);			
	    	}
		}
		catch(Exception e) {
			processingErrors++;
			return resultIP;
		}
		
		return resultIP;
	}

	/**
	 * 
	 */
	
	public String parseIpContact(String sipLine){
		String resultIP= "";
		Matcher m0 = Pattern.compile(validIPAddressRegexContact).matcher(sipLine);
		
		try {
			if (m0.lookingAt()) {				
				resultIP = m0.group(1);
	    	}
		}
		catch(Exception e) {
			processingErrors++;
			return resultIP;
		}
		return resultIP;
	}
	
	/**
	 * 
	 * @param headerLine
	 */
	
	public void setHeaderLine (String headerLine) {
		this.headerLine = headerLine;
	}
	
	/**
	 * 
	 * @return
	 */
	public ArrayList<String> getSipContent() {
		return sipContent;
	}

	
	/**
	 * 
	 * @return
	 */
	public ArrayList<String> getSipContent(boolean flag) {
		return sipContent;
	}
	
	
	public String getContactIP() {	
		for (String line: sipContent) {
			if(line.contains("Contact:")){
				return parseIpContact(line);
			}
		}
		return "";
	}
	
	/**
	 * 
	 * @return
	 */
	
	public String getCallID() {
		return callID;
	}

	public void setCallID(String callID) {
		this.callID = callID;
	}
	
	public void initFormatMessage () {
		
		Matcher m1 = Pattern.compile(timeStampRegex).matcher(headerLine);
		
		try {
			if (m1.lookingAt())
	    	{
				//[2011/01/13 08:55:56.109]
	    		timeStamp = "[" + m1.group(1) + "/" + m1.group(2) + "/" + m1.group(3) + " " + m1.group(4) + ":" + m1.group(5) + ":" + m1.group(6) + "." + m1.group(7) + "]";
	        	
	    	}
		}
		catch(Exception e) {
			processingErrors++;
		}
		
		Matcher m2 = Pattern.compile(messageDirectionRegex).matcher(headerLine);
		m2.find();
		
		try {
			if(m2.group(0).contains("RX")) {
				setMessageDirection("IN");
			}
			else if(m2.group(0).contains("TX")) {
				setMessageDirection("OUT");
			}
			else {
				setMessageDirection("ERROR");
				processingErrors++;
			}
			
		}
		catch(Exception e) {
			processingErrors++;
		}
	
		Matcher m3 = Pattern.compile(methodRegex).matcher(headerLine);
		try {
			if(m3.find()) {
				setSipMethod(m3.group(2));
			}
			else {
				setSipMethod("ERROR");
				processingErrors++;
			}
			
		}
		catch(Exception e) {
			processingErrors++;
		}	
		
		for (String line : sipContent) {   
			 Matcher m4 = Pattern.compile(fromTagRegex).matcher(line);
			 if(m4.find()){
				fromTag = m4.group(1);
			 }
		}
		 
		for (String line : sipContent) {   
			 Matcher m5 = Pattern.compile(toTagRegex).matcher(line);
			 if(m5.find()){
				 toTag = m5.group(1);
			 }
		}
		
		
		
	}
	
	public String getSipMethod() {
		return sipMethod;
	}


	public void setSipMethod(String sipMethod) {
		this.sipMethod = sipMethod;
	}
	
	public String getToTag() {
		return toTag;
	}

	public void setToTag(String toTag) {
		this.toTag = toTag;
	}

	public String getFromTag() {
		return fromTag;
	}

	public void setFromTag(String fromTag) {
		this.fromTag = fromTag;
	}
	
	
	public int getErrors() {
		return processingErrors;
	}

	public String getTimeStamp() {
		return timeStamp;
	}
	
	public String getMessageDirection() {
		return messageDirection;
	}

	private void setMessageDirection(String messageDirection) {
		this.messageDirection = messageDirection;
	}

	
}
